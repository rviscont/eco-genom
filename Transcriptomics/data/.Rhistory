#cross check
2668+2405+338+106 # 4841, total OW
1133+2405+338+42 # 3742, total OWA
116+42+106+338    # 520, total OA
bwnet <- readRDS("bwnet.rds")
cor <- temp_cor
soft_power <- 8 #SHOULD TRY RUNNING WITH 7 BASEDD ON RSQUARFED
temp_cor <- cor
cor <- WGCNA::cor # use the 'cor' function from the WGCNA package
cor <- temp_cor
bwnet <- readRDS("bwnet.rds")
bwnet <- readRDS("bwnet.rds")
bwnet8 <- readRDS("bwnet8.rds")
bwnet8 <- readRDS("bwnet8.rds")
## Set your working directory
setwd('C:/Users/regina/Desktop/githubrepo/eco-genom/Transcriptomics/data')
cor <- temp_cor
bwnet8 <- readRDS("bwnet8.rds")
bwnet10 <- readRDS("bwnet10.rds")
bwnet14 <- readRDS("bwnet14.rds")
bwnet18 <- readRDS("bwnet18.rds")
module_eigengenes8 <- bwnet8$MEs
head(module_eigengenes8)
# get number of genes for each module
table(bwnet8$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet8$dendrograms[[1]], cbind(bwnet8$unmergedColors, bwnet8$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# Load the package
library(WGCNA);
# Load the package
library(WGCNA);
module_eigengenes8 <- bwnet8$MEs
head(module_eigengenes8)
# get number of genes for each module
table(bwnet8$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet8$dendrograms[[1]], cbind(bwnet8$unmergedColors, bwnet8$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
traits <- sample_metadata[, c(5,8,11,14,17)]
###################################################################################
# 1. Import the counts matrix and metadata and filter using DESeq2
#she wanted the filtered assembly so we could limit our input for wgcna
countsTable <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
sample_metadata = read.table(file = "Ahud_trait_data.txt",header=T, row.names = 1)
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
# Load the package
library(WGCNA);
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
library(DESeq2)
library(ggplot2)
library(tidyverse)
library(CorLevelPlot)
library(gridExtra)
library(Rmisc)
###################################################################################
# 1. Import the counts matrix and metadata and filter using DESeq2
#she wanted the filtered assembly so we could limit our input for wgcna
countsTable <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
sample_metadata = read.table(file = "Ahud_trait_data.txt",header=T, row.names = 1)
#a different colData from yesterday
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=sample_metadata,
design= ~ 1)
dim(dds)
dds <- dds[rowSums(counts(dds) >= 15) >= 28,]
nrow(dds)
# Run the DESeq model to test for differential gene expression
dds <- DESeq(dds)
# 2. QC - outlier detection ------------------------------------------------
# detect outlier genes
#wgcna has a gsg function
gsg <- goodSamplesGenes(t(countsTable))
summary(gsg)
gsg$allOK
table(gsg$goodGenes)
table(gsg$goodSamples)
# detect outlier samples - hierarchical clustering - method 1
htree <- hclust(dist(t(countsTable)), method = "average")
plot(htree)
pca <- prcomp(t(countsTable))
pca.dat <- pca$x
pca.var <- pca$sdev^2
pca.var.percent <- round(pca.var/sum(pca.var)*100, digits = 2)
pca.dat <- as.data.frame(pca.dat)
PCAtest <- ggplot(pca.dat, aes(PC1, PC2)) +
geom_point() +
geom_text(label = rownames(pca.dat)) +
labs(x = paste0('PC1: ', pca.var.percent[1], ' %'),
y = paste0('PC2: ', pca.var.percent[2], ' %'))
colData <- row.names(sample_metadata)
# making the rownames and column names identical
all(rownames(colData) %in% colnames(countsTableRound)) # to see if all samples are present in both
all(rownames(colData) == colnames(countsTableRound))  # to see if all samples are in the same order
# perform variance stabilization
dds_norm <- vst(dds)
# get normalized counts aka assay this and then transform it
norm.counts <- assay(dds_norm) %>%
t()
cor <- temp_cor
module_eigengenes8 <- bwnet8$MEs
head(module_eigengenes8)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet8$dendrograms[[1]], cbind(bwnet8$unmergedColors, bwnet8$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
#this is calc of pearsons correlation
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
#this is calc of pearsons correlation
module.trait.corr8 <- cor(module_eigengenes9, traits, use = 'p')
#this is calc of pearsons correlation
module.trait.corr8 <- cor(module_eigengenes8, traits, use = 'p')
module.trait.corr.pvals8 <- corPvalueStudent(module.trait.corr8, nSamples)
heatmap.data <- merge(module_eigengenes8, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
View(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[16:20],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
module.gene.mapping <- as.data.frame(bwnet8$colors) # assigns module membership to each gene
module_eigengenes10 <- bwnet10$MEs
head(module_eigengenes10)
# get number of genes for each module
table(bwnet10$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet10$dendrograms[[1]], cbind(bwnet10$unmergedColors, bwnet10$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
#this is calc of pearsons correlation
module.trait.corr10 <- cor(module_eigengenes10, traits, use = 'p')
module.trait.corr.pvals10 <- corPvalueStudent(module.trait.corr10, nSamples)
heatmap.data <- merge(module_eigengenes10, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
View(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[14:18],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
#this is calc of pearsons correlation
module.trait.corr8 <- cor(module_eigengenes8, traits, use = 'p')
module.trait.corr.pvals8 <- corPvalueStudent(module.trait.corr8, nSamples)
heatmap.data <- merge(module_eigengenes8, traits, by = 'row.names')
heatmap.data8 <- merge(module_eigengenes8, traits, by = 'row.names')
head(heatmap.data8)
View(heatmap.data8)
heatmap.data8 <- heatmap.data8 %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data8)
CorLevelPlot(heatmap.data8,
x = names(heatmap.data8)[17:21],
y = names(heatmap.data8)[1:16],
col = c("blue1", "skyblue", "white", "pink", "red"))
View(heatmap.data8)
CorLevelPlot(heatmap.data8,
x = names(heatmap.data8)[16:20],
y = names(heatmap.data8)[1:15],
col = c("blue1", "skyblue", "white", "pink", "red"))
module_eigengenes8 <- bwnet8$MEs
head(module_eigengenes8)
# get number of genes for each module
table(bwnet8$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet8$dendrograms[[1]], cbind(bwnet8$unmergedColors, bwnet8$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
#this is calc of pearsons correlation
module.trait.corr8 <- cor(module_eigengenes8, traits, use = 'p')
module.trait.corr.pvals8 <- corPvalueStudent(module.trait.corr8, nSamples)
heatmap.data8 <- merge(module_eigengenes8, traits, by = 'row.names')
head(heatmap.data8)
heatmap.data8 <- heatmap.data8 %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data8)
CorLevelPlot(heatmap.data8,
x = names(heatmap.data8)[16:20],
y = names(heatmap.data8)[1:15],
col = c("blue1", "skyblue", "white", "pink", "red"))
module_eigengenes10 <- bwnet10$MEs
head(module_eigengenes10)
# get number of genes for each module
table(bwnet10$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet10$dendrograms[[1]], cbind(bwnet10$unmergedColors, bwnet10$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
#this is calc of pearsons correlation
module.trait.corr10 <- cor(module_eigengenes10, traits, use = 'p')
module.trait.corr.pvals10 <- corPvalueStudent(module.trait.corr10, nSamples)
heatmap.data10 <- merge(module_eigengenes10, traits, by = 'row.names')
head(heatmap.data10)
heatmap.data10 <- heatmap.data10 %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data10)
View(heatmap.data10)
CorLevelPlot(heatmap.data8,
x = names(heatmap.data8)[14:18],
y = names(heatmap.data8)[1:13],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data10,
x = names(heatmap.data10)[14:18],
y = names(heatmap.data10)[1:13],
col = c("blue1", "skyblue", "white", "pink", "red"))
module_eigengenes14 <- bwnet14$MEs
head(module_eigengenes14)
# get number of genes for each module
table(bwnet14$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet14$dendrograms[[1]], cbind(bwnet14$unmergedColors, bwnet14$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
#this is calc of pearsons correlation
module.trait.corr14 <- cor(module_eigengenes14, traits, use = 'p')
module.trait.corr.pvals14 <- corPvalueStudent(module.trait.corr14, nSamples)
heatmap.data14 <- merge(module_eigengenes14, traits, by = 'row.names')
head(heatmap.data14)
heatmap.data14 <- heatmap.data14 %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data14)
View(heatmap.data14)
CorLevelPlot(heatmap.data14,
x = names(heatmap.data14)[12:16],
y = names(heatmap.data14)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
module_eigengenes18 <- bwnet18$MEs
head(module_eigengenes18)
# get number of genes for each module
table(bwnet10$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet18$dendrograms[[1]], cbind(bwnet18$unmergedColors, bwnet18$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
#this is calc of pearsons correlation
module.trait.corr18 <- cor(module_eigengenes18, traits, use = 'p')
module.trait.corr.pvals18 <- corPvalueStudent(module.trait.corr18, nSamples)
heatmap.data18 <- merge(module_eigengenes18, traits, by = 'row.names')
head(heatmap.data18)
heatmap.data18 <- heatmap.data18 %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data18)
View(heatmap.data18)
CorLevelPlot(heatmap.data18,
x = names(heatmap.data10)[8:12],
y = names(heatmap.data10)[1:7],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data18,
x = names(heatmap.data18)[8:12],
y = names(heatmap.data18)[1:7],
col = c("blue1", "skyblue", "white", "pink", "red"))
CorLevelPlot(heatmap.data8,
x = names(heatmap.data8)[16:20],
y = names(heatmap.data8)[1:15],
col = c("blue1", "skyblue", "white", "pink", "red"))
source("C:/Users/regina/Desktop/githubrepo/eco-genom/Transcriptomics/scripts/hw2 different softpowers.R")
module_eigengenes8 <- bwnet8$MEs
head(module_eigengenes8)
# get number of genes for each module
table(bwnet8$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet8$dendrograms[[1]], cbind(bwnet8$unmergedColors, bwnet8$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
#this is calc of pearsons correlation
module.trait.corr8 <- cor(module_eigengenes8, traits, use = 'p')
module.trait.corr.pvals8 <- corPvalueStudent(module.trait.corr8, nSamples)
heatmap.data8 <- merge(module_eigengenes8, traits, by = 'row.names')
head(heatmap.data8)
heatmap.data8 <- heatmap.data8 %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data8)
CorLevelPlot(heatmap.data8,
x = names(heatmap.data8)[16:20],
y = names(heatmap.data8)[1:15],
col = c("blue1", "skyblue", "white", "pink", "red"))
module_eigengenes10 <- bwnet10$MEs
head(module_eigengenes10)
# get number of genes for each module
table(bwnet10$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet10$dendrograms[[1]], cbind(bwnet10$unmergedColors, bwnet10$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
#this is calc of pearsons correlation
module.trait.corr10 <- cor(module_eigengenes10, traits, use = 'p')
module.trait.corr.pvals10 <- corPvalueStudent(module.trait.corr10, nSamples)
heatmap.data10 <- merge(module_eigengenes10, traits, by = 'row.names')
head(heatmap.data10)
heatmap.data10 <- heatmap.data10 %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data10)
CorLevelPlot(heatmap.data10,
x = names(heatmap.data10)[14:18],
y = names(heatmap.data10)[1:13],
col = c("blue1", "skyblue", "white", "pink", "red"))
module_eigengenes14 <- bwnet14$MEs
head(module_eigengenes14)
# get number of genes for each module
table(bwnet14$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet14$dendrograms[[1]], cbind(bwnet14$unmergedColors, bwnet14$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
#this is calc of pearsons correlation
module.trait.corr14 <- cor(module_eigengenes14, traits, use = 'p')
module.trait.corr.pvals14 <- corPvalueStudent(module.trait.corr14, nSamples)
heatmap.data14 <- merge(module_eigengenes14, traits, by = 'row.names')
head(heatmap.data14)
heatmap.data14 <- heatmap.data14 %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data14)
CorLevelPlot(heatmap.data14,
x = names(heatmap.data14)[12:16],
y = names(heatmap.data14)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
module_eigengenes18 <- bwnet18$MEs
head(module_eigengenes18)
# get number of genes for each module
table(bwnet18$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet18$dendrograms[[1]], cbind(bwnet18$unmergedColors, bwnet18$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
#this is calc of pearsons correlation
module.trait.corr18 <- cor(module_eigengenes18, traits, use = 'p')
module.trait.corr.pvals18 <- corPvalueStudent(module.trait.corr18, nSamples)
heatmap.data18 <- merge(module_eigengenes18, traits, by = 'row.names')
head(heatmap.data18)
heatmap.data18 <- heatmap.data18 %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data18)
#this is calc of pearsons correlation
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
CorLevelPlot(heatmap.data18,
x = names(heatmap.data18)[8:12],
y = names(heatmap.data18)[1:7],
col = c("blue1", "skyblue", "white", "pink", "red"))
View(sample_metadata)
###################################################################################
power <- c(c(1:10), seq(from = 12, to = 50, by = 2))
# Call the network topology analysis function; this step takes a couple minutes, signed means pick up or down regd, unsigned means absolute value
sft <- pickSoftThreshold(norm.counts,
powerVector = power,
networkType = "signed",
verbose = 5)
sft.data <- sft$fitIndices
a1 <- ggplot(sft.data, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit, signed R^2') +
theme_classic()
a2 <- ggplot(sft.data, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(a1, a2, nrow = 2)
